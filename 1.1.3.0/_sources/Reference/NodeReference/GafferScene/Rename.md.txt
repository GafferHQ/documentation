Rename
======

Renames locations in the scene.

user
----

Container for user-defined plugs. Nodes
should never make their own plugs here,
so users are free to do as they wish.

out
---

The processed output scene.

enabled
-------

The on/off state of the node. When it is off, the node outputs the input scene unchanged.

in
--

The input scene

filter
------

The filter used to control which parts of the scene are
processed. A Filter node should be connected here.

name
----

The new name for the location. If this name is non-empty then it
takes precedence, and all other renaming operations are ignored.

> Tip : The `${scene:path}` context variable contains the
> location's original name, and can be used in a Spreadsheet's
> `selector` to allow each row to define the new name for a
> particular location.

deletePrefix
------------

A prefix to remove from the start of the original name. Prefixes are removed
before the suffixes and before the find and replace operation is
performed.

deleteSuffix
------------

A suffix to remove from the start of the original name. Suffixes are removed
before the find and replace operation is performed.

find
----

A string to search for within the original name. All occurrences of this string
will be replaced with the value of `replace`. When `useRegularExpressions`
is on, the search string is treated as a regular expression, with the
following syntax :

Matching
--------

- `.` : Matches any character.
- `[aef]` : Matches any character in the set.
- `[^aef]` : Matches any character not in the set.
- `[a-z]` : Matches any character in the specified range.
- `[[:digit:]]` : Matches any numeric digit.
- `[[:space:]]` : Matches any whitespace character.

Repetition
----------

- `*` : Matches the preceding pattern any number of times (including none).
- `+` : Matches the preceding pattern 1 or more times.
- `{N}` : Matches the preceding pattern N times.
- `{M,N}` : Matches the preceding pattern between M and N times.

Alternatives
------------

- `A|B` : Matches either pattern A or pattern B.

Captures
--------

- `()` : Captures the subgroup of the pattern within the brackets,
  allowing it to be referenced by `{}` in the `replace` string.

replace
-------

The replacement for strings matched by the `find` plug.
When `useRegularExpressions` is on, this can refer to
captured patterns using Python's standard string formatting
syntax :

- `{0}` : The entire string matched by the regular expresion.
- `{1}` : The 1st subgroup captured within `()` brackets by the `find` string.
- `{N}` : The Nth subgroup captured within `()` brackets by the `find` string.
- `{1:0>4}` : The 1st subgroup, aligned to the right and padded to width 4.

useRegularExpressions
---------------------

When on, the `find` string is treated as a regular expression,
allowing it to perform complex pattern matching and to capture sections
of the match to be referenced by the `replace` string.

addPrefix
---------

A string to add at the start of the name. Prefixes are
added last, after the find and replace operation has
been performed.

addSuffix
---------

A string to add at the end of the name. Suffixes are
added last, after the find and replace operation has
been performed.